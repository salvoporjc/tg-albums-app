class TgAlbumsApp{constructor(t){if(!t)throw new Error("TgFileService instance required");this.service=t,this.botToken=t.botToken,this.chatId=t.chatId,this.root=[],this.rootFileId=null,this._ready=this._init()}async _callTelegram(t,e){const i=`https://api.telegram.org/bot${this.botToken}/${t}`,a=await fetch(i,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),s=await a.json();if(!s.ok)throw new Error(`Telegram API error: ${s.description}`);return s.result}async getChat(){return this._callTelegram("getChat",{chat_id:this.chatId})}async setChatDescription(t){return this._callTelegram("setChatDescription",{chat_id:this.chatId,description:t})}async ready(){return this._ready}async _init(){const t=await this.getChat(),e=t&&t.description?t.description.trim():"";if(e)try{await this._loadRootFromFileId(e)}catch(t){console.warn("Failed to load root file from chat description:",t),await this._createEmptyRoot()}else await this._createEmptyRoot()}async _createEmptyRoot(){this.root=[];const t=new Blob([JSON.stringify(this.root)],{type:"application/json"}),e=await this.service.putFile(t);this.rootFileId=e,await this.setChatDescription(e)}async _loadRootFromFileId(t){const e=await this.service.getFile(t,"albums.json","application/json"),i=await e.blob.text(),a=JSON.parse(i);if(!Array.isArray(a))throw new Error("Root file JSON must be array");for(const t of a)if("string"!=typeof t.name||"string"!=typeof t.albumFileId)throw new Error("Invalid album entry");this.root=a.sort(((t,e)=>t.name.localeCompare(e.name))),this.rootFileId=t}async _saveRootCascade(){const t=new Blob([JSON.stringify(this.root)],{type:"application/json"}),e=await this.service.putFile(t);this.rootFileId=e,await this.setChatDescription(e)}async createAlbum(t){if(await this.ready(),!t||"string"!=typeof t)throw new Error("Name required");if(this.root.find((e=>e.name===t)))throw new Error("Album already exists");const e=new Blob([JSON.stringify([])],{type:"application/json"}),i=await this.service.putFile(e),a={name:t,thumbFileId:null,albumFileId:i};return this.root.push(a),this.root.sort(((t,e)=>t.name.localeCompare(e.name))),await this._saveRootCascade(),new Album(this.service,i,t,this)}async getAlbums(){return await this.ready(),this.root.map((t=>new Album(this.service,t.albumFileId,t.name,this,t.thumbFileId)))}async findAlbumByFileId(t){await this.ready();const e=this.root.find((e=>e.albumFileId===t));return e?new Album(this.service,e.albumFileId,e.name,this,e.thumbFileId):null}async findAlbumByName(t){await this.ready();const e=this.root.find((e=>e.name===t));return e?new Album(this.service,e.albumFileId,e.name,this,e.thumbFileId):null}async deleteAllAlbums(){await this.ready(),this.root=[],await this._saveRootCascade()}async _updateAlbumDescriptorByFileId(t,e){const i=this.root.findIndex((e=>e.albumFileId===t));if(-1===i)throw new Error("Album not found in root");this.root[i]=Object.assign({},this.root[i],e),this.root.sort(((t,e)=>t.name.localeCompare(e.name))),await this._saveRootCascade()}}class Album{constructor(t,e,i,a,s=null){this.service=t,this.app=a,this.name=i,this.albumFileId=e,this.thumbFileId=s,this.files=[],this._loaded=this._load()}async ready(){return this._loaded}async _load(){const t=await this.service.getFile(this.albumFileId,`${this.name}.json`,"application/json");if(!t||!t.blob)throw new Error("Failed to load album file");const e=await t.blob.text(),i=JSON.parse(e);if(!Array.isArray(i))throw new Error("Album file must be array");for(const t of i)if("string"!=typeof t.name||"string"!=typeof t.fullFileId)throw new Error("Invalid file entry in album");this.files=i.slice().sort(((t,e)=>t.name.localeCompare(e.name)))}static async _resizeBlob(t,e,i,a){a=a||t.type||"image/png";const s=await createImageBitmap(t),l=s.width,r=s.height;let o=l,n=r;const h=Math.min(1,Math.min(e/l,i/r));o=Math.max(1,Math.round(l*h)),n=Math.max(1,Math.round(r*h));const m=document.createElement("canvas");m.width=o,m.height=n;return m.getContext("2d").drawImage(s,0,0,o,n),await new Promise((t=>m.toBlob(t,a)))}async getFiles(){return await this.ready(),this.files.map((t=>Object.assign({},t)))}async addFiles(t){if(await this.ready(),!Array.isArray(t))throw new Error("items must be array of [Blob,name,mime]");for(const e of t){const[t,i,a]=e;if(!t||!i)throw new Error("Each item must be [Blob,name,mime]");const s=await this.service.putFile(t),l=await Album._resizeBlob(t,150,150,a),r=await Album._resizeBlob(t,1920,1080,a),o=await this.service.putFile(l),n=await this.service.putFile(r),h={name:i,mime:a||t.type||"application/octet-stream",thumbFileId:o,screenFileId:n,fullFileId:s};this.files.push(h),this.files.sort(((t,e)=>t.name.localeCompare(e.name))),await this._saveAlbumCascade()}}async _saveAlbumCascade(){const t=new Blob([JSON.stringify(this.files)],{type:"application/json"}),e=await this.service.putFile(t),i=this.albumFileId;this.albumFileId=e,await this.app._updateAlbumDescriptorByFileId(i,{albumFileId:e,thumbFileId:this._deriveThumbFileId()})}_deriveThumbFileId(){return 0===this.files.length?null:this.files[0].thumbFileId||null}async findFileByFullId(t){await this.ready();const e=this.files.find((e=>e.fullFileId===t));return e?new AlbumFile(this,e):null}async findFileByName(t){await this.ready();const e=this.files.find((e=>e.name===t));return e?new AlbumFile(this,e):null}async deleteThumbnailForFile(t){await this.ready();const e=this.files.findIndex((e=>e.fullFileId===t));if(-1===e)throw new Error("File not found");this.files[e].thumbFileId=null,await this._saveAlbumCascade()}async clear(){await this.ready(),this.files=[],await this._saveAlbumCascade()}async deleteAlbum(){await this.ready();const t=this.app.root,e=t.findIndex((t=>t.albumFileId===this.albumFileId||t.name===this.name));-1!==e&&(t.splice(e,1),this.app.root=t.sort(((t,e)=>t.name.localeCompare(e.name))),await this.app._saveRootCascade())}}class AlbumFile{constructor(t,e){this.album=t,this.descriptor=e}async getFullBlob(){return(await this.album.service.getFile(this.descriptor.fullFileId,this.descriptor.name,this.descriptor.mime)).blob}async getThumbBlob(){return this.descriptor.thumbFileId?(await this.album.service.getFile(this.descriptor.thumbFileId,`thumb_${this.descriptor.name}`,this.descriptor.mime)).blob:null}async getScreenBlob(){return this.descriptor.screenFileId?(await this.album.service.getFile(this.descriptor.screenFileId,`screen_${this.descriptor.name}`,this.descriptor.mime)).blob:null}async setAsAlbumThumbnail(){this.album.files=this.album.files.map((t=>Object.assign({},t)));const t=this.album.files.find((t=>t.fullFileId===this.descriptor.fullFileId));if(!t)throw new Error("File not found in album");this.album.thumbFileId=t.thumbFileId||null,await this.album._saveAlbumCascade()}async removeFromAlbum(){this.album.files=this.album.files.filter((t=>t.fullFileId!==this.descriptor.fullFileId)),await this.album._saveAlbumCascade()}async addToAlbum(t){const e=this.album.app.root.find((e=>e.albumFileId===t));if(!e)throw new Error("Target album not found");const i=new Album(this.album.service,e.albumFileId,e.name,this.album.app,e.thumbFileId);await i.ready();const a=Object.assign({},this.descriptor);i.files.push(a),i.files.sort(((t,e)=>t.name.localeCompare(e.name))),await i._saveAlbumCascade()}}
