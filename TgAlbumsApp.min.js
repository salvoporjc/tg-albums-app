class TgAlbumsApp{constructor(t){if(!t)throw new Error("TgFileService instance required");this.service=t,this.botToken=t.botToken,this.chatId=t.chatId,this.root=[],this.rootFileId=null,this._ready=this._init()}async ready(){return this._ready}async _callTelegram(t,e){const i=`https://api.telegram.org/bot${this.botToken}/${t}`,r=await fetch(i,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),a=await r.json();if(!a.ok)throw new Error(`Telegram API error: ${a.description}`);return a.result}async _getChat(){return this._callTelegram("getChat",{chat_id:this.chatId})}async _setChatDescription(t){return this._callTelegram("setChatDescription",{chat_id:this.chatId,description:t})}static _makeAlbumId(){const t="abcdefghijklmnopqrstuvwxyz",pick=()=>t[Math.floor(26*Math.random())],e=Array.from({length:3},(()=>Math.random()<.5?pick().toUpperCase():pick())).join("");return"a"+Date.now()+e}async _init(){try{const t=await this._getChat(),e=t&&t.description?t.description.trim():"";if(e)try{await this._loadRootFromFileId(e)}catch(t){console.warn("Failed to load root file from chat description:",t),await this._createEmptyRoot()}else await this._createEmptyRoot();if(!this.root.find((t=>"Trash"===t.name))){console.log("Creating missing Trash album");const t=TgAlbumsApp._makeAlbumId(),e=new Blob([JSON.stringify([])],{type:"application/json"}),i={name:"Trash",thumbFileId:null,albumFileId:await this.service.putFile(e),albumId:t};this.root.push(i),this.root.sort(((t,e)=>t.name.localeCompare(e.name))),await this._saveRootCascade()}}catch(t){throw console.error("Initialization error:",t),t}}async _createEmptyRoot(){this.root=[];const t=new Blob([JSON.stringify(this.root)],{type:"application/json"}),e=await this.service.putFile(t);this.rootFileId=e,await this._setChatDescription(e)}async _loadRootFromFileId(t){const e=await this.service.getFile(t,"albums.json","application/json");if(!e||!e.blob)throw new Error("No root file blob");const i=await e.blob.text(),r=JSON.parse(i);if(!Array.isArray(r))throw new Error("Root file JSON must be array");for(const t of r)if("string"!=typeof t.name||"string"!=typeof t.albumFileId||"string"!=typeof t.albumId)throw new Error("Invalid album entry");this.root=r.slice().sort(((t,e)=>t.name.localeCompare(e.name))),this.rootFileId=t}async _saveRootCascade(){const t=new Blob([JSON.stringify(this.root)],{type:"application/json"}),e=await this.service.putFile(t);this.rootFileId=e,await this._setChatDescription(e)}async createAlbum(t){await this.ready();try{if(!t||"string"!=typeof t)throw new Error("Name required");const e=TgAlbumsApp._makeAlbumId(),i=new Blob([JSON.stringify([])],{type:"application/json"}),r=await this.service.putFile(i),a={name:t,thumbFileId:null,albumFileId:r,albumId:e};return this.root.push(a),this.root.sort(((t,e)=>t.name.localeCompare(e.name))),await this._saveRootCascade(),{ok:!0,album:new Album(this.service,r,t,this,a.thumbFileId,e)}}catch(t){return console.error("createAlbum error:",t),{ok:!1,errors:[String(t)]}}}async getAlbums(){return await this.ready(),this.root.map((t=>new Album(this.service,t.albumFileId,t.name,this,t.thumbFileId,t.albumId)))}async findAlbumById(t){await this.ready();const e=this.root.find((e=>e.albumId===t));return e?new Album(this.service,e.albumFileId,e.name,this,e.thumbFileId,e.albumId):null}async findAlbumsByName(t){await this.ready();return this.root.filter((e=>e.name===t)).map((t=>new Album(this.service,t.albumFileId,t.name,this,t.thumbFileId,t.albumId)))}async deleteAllAlbums(){await this.ready();try{const t=this.root.findIndex((t=>"Trash"===t.name)),e=-1!==t?this.root.splice(t,1)[0]:null;return this.root=[],e&&this.root.push(e),await this._saveRootCascade(),{ok:!0}}catch(t){return console.error("deleteAllAlbums error:",t),{ok:!1,errors:[String(t)]}}}async _updateAlbumDescriptorByFileId(t,e){const i=this.root.findIndex((e=>e.albumFileId===t));if(-1===i)throw new Error("Album not found in root");this.root[i]=Object.assign({},this.root[i],e),this.root.sort(((t,e)=>t.name.localeCompare(e.name))),await this._saveRootCascade()}async _updateAlbumDescriptorByAlbumId(t,e){const i=this.root.findIndex((e=>e.albumId===t));if(-1===i)throw new Error("Album not found in root");this.root[i]=Object.assign({},this.root[i],e),this.root.sort(((t,e)=>t.name.localeCompare(e.name))),await this._saveRootCascade()}}class Album{constructor(t,e,i,r,a=null,s=null){this.service=t,this.app=r,this.name=i,this.albumFileId=e,this.thumbFileId=a,this.albumId=s,this.files=[],this._loaded=this._load()}async ready(){return this._loaded}async _load(){const t=await this.service.getFile(this.albumFileId,`${this.name}.json`,"application/json");if(!t||!t.blob)throw new Error("Failed to load album file");const e=await t.blob.text(),i=JSON.parse(e);if(!Array.isArray(i))throw new Error("Album file must be array");for(const t of i)if("string"!=typeof t.name||"string"!=typeof t.fullFileId)throw new Error("Invalid file entry in album");this.files=i.slice().sort(((t,e)=>t.name.localeCompare(e.name)))}static async _resizeBlob(t,e,i,r){r=r||t.type||"image/png";const a=await createImageBitmap(t),s=a.width,o=a.height,l=Math.min(1,Math.min(e/s,i/o)),n=Math.max(1,Math.round(s*l)),h=Math.max(1,Math.round(o*l)),u=document.createElement("canvas");u.width=n,u.height=h;return u.getContext("2d").drawImage(a,0,0,n,h),await new Promise((t=>u.toBlob(t,r)))}async getFiles(){return await this.ready(),this.files.map((t=>Object.assign({},t)))}async addFiles(t){await this.ready();const e=[];try{if(!Array.isArray(t))throw new Error("items must be array of [Blob,name,mime]");for(const i of t){const[t,r,a]=i;if(!t||!r){const t="Each item must be [Blob,name,mime]";console.warn(t),e.push(t);continue}const s=a||t.type||"";if(!s.startsWith("image/")&&!s.startsWith("video/")){const t=`Skipped unsupported MIME type for file "${r}": ${s}`;console.warn(t),e.push(t);continue}const o=await this.service.putFile(t);let l,n;try{l=await Album._resizeBlob(t,150,150,s)}catch(e){console.warn("Thumbnail creation failed, using original blob as thumb:",e),l=t}try{n=await Album._resizeBlob(t,1920,1080,s)}catch(e){console.warn("Screen resize failed, using original blob as screen:",e),n=t}const h=await this.service.putFile(l),u={name:r,mime:s,thumbFileId:h,screenFileId:await this.service.putFile(n),fullFileId:o,originalAlbumIds:[this.albumId]};this.files.push(u),this.files.sort(((t,e)=>t.name.localeCompare(e.name))),await this._saveAlbumCascade()}const i={ok:!0};return e.length&&(i.warnings=e),i}catch(t){return console.error("addFiles error:",t),{ok:!1,errors:[String(t)]}}}async _saveAlbumCascade(){const t=new Blob([JSON.stringify(this.files)],{type:"application/json"}),e=await this.service.putFile(t),i=this.albumFileId;this.albumFileId=e;try{await this.app._updateAlbumDescriptorByFileId(i,{albumFileId:e,thumbFileId:this._deriveThumbFileId()})}catch(t){console.error("Failed to update root after saving album:",t)}}_deriveThumbFileId(){return 0===this.files.length?null:this.files[0].thumbFileId||null}async findFileByFullId(t){await this.ready();const e=this.files.find((e=>e.fullFileId===t));return e?new AlbumFile(this,e):null}async findFilesByName(t){await this.ready();return this.files.filter((e=>e.name===t)).map((t=>new AlbumFile(this,t)))}async deleteThumbnailForFile(t){await this.ready();try{const e=this.files.findIndex((e=>e.fullFileId===t));if(-1===e)throw new Error("File not found");return this.files[e].thumbFileId=null,await this._saveAlbumCascade(),{ok:!0}}catch(t){return console.error("deleteThumbnailForFile error:",t),{ok:!1,errors:[String(t)]}}}async clear(){await this.ready();try{return this.files=[],await this._saveAlbumCascade(),{ok:!0}}catch(t){return console.error("clear album error:",t),{ok:!1,errors:[String(t)]}}}async deleteAlbum(){await this.ready();try{if("Trash"===this.name){const t="Trash album cannot be deleted";return console.warn(t),{ok:!1,errors:[t]}}const t=this.app.root,e=t.findIndex((t=>t.albumId===this.albumId));return-1!==e&&(t.splice(e,1),this.app.root=t.sort(((t,e)=>t.name.localeCompare(e.name))),await this.app._saveRootCascade()),{ok:!0}}catch(t){return console.error("deleteAlbum error:",t),{ok:!1,errors:[String(t)]}}}}class AlbumFile{constructor(t,e){this.album=t,this.descriptor=e}async getFullBlob(){return(await this.album.service.getFile(this.descriptor.fullFileId,this.descriptor.name,this.descriptor.mime)).blob}async getThumbBlob(){return this.descriptor.thumbFileId?(await this.album.service.getFile(this.descriptor.thumbFileId,`thumb_${this.descriptor.name}`,this.descriptor.mime)).blob:null}async getScreenBlob(){return this.descriptor.screenFileId?(await this.album.service.getFile(this.descriptor.screenFileId,`screen_${this.descriptor.name}`,this.descriptor.mime)).blob:null}async getFullBlobURL(){return URL.createObjectURL(await this.getFullBlob())}async getThumbBlobURL(){return URL.createObjectURL(await this.getThumbBlob())}async getScreenBlobURL(){return URL.createObjectURL(await this.getScreenBlob())}async setAsAlbumThumbnail(){try{await this.album.ready();const t=this.album.files.find((t=>t.fullFileId===this.descriptor.fullFileId));if(!t)throw new Error("File not found in album");return this.album.thumbFileId=t.thumbFileId||null,await this.album._saveAlbumCascade(),{ok:!0}}catch(t){return console.error("setAsAlbumThumbnail error:",t),{ok:!1,errors:[String(t)]}}}async removeFromAlbum(){try{await this.album.ready();const t=this.album.files.findIndex((t=>t.fullFileId===this.descriptor.fullFileId));if(-1===t)throw new Error("File not found in album");const e=this.album.files.splice(t,1)[0];e.originalAlbumIds=e.originalAlbumIds||[],e.originalAlbumIds.includes(this.album.albumId)||e.originalAlbumIds.push(this.album.albumId);const i=this.album.app.root.find((t=>"Trash"===t.name));if(!i)throw new Error("Trash album not found");const r=new Album(this.album.service,i.albumFileId,i.name,this.album.app,i.thumbFileId,i.albumId);return await r.ready(),r.files.push(e),r.files.sort(((t,e)=>t.name.localeCompare(e.name))),await r._saveAlbumCascade(),await this.album._saveAlbumCascade(),{ok:!0}}catch(t){return console.error("removeFromAlbum error:",t),{ok:!1,errors:[String(t)]}}}async restoreToAlbum(){try{if(await this.album.ready(),"Trash"!==this.album.name)throw new Error("restoreToAlbum should be called on a file in Trash");const t=this.descriptor.originalAlbumIds||[];if(!t.length)throw new Error("No original album recorded");const e=t[t.length-1],i=this.album.app.root.find((t=>t.albumId===e));if(!i)throw new Error("Original album not found");const r=new Album(this.album.service,i.albumFileId,i.name,this.album.app,i.thumbFileId,i.albumId);await r.ready();const a=this.album.files.findIndex((t=>t.fullFileId===this.descriptor.fullFileId));if(-1===a)throw new Error("File not found in Trash");const s=this.album.files.splice(a,1)[0];return s.originalAlbumIds=s.originalAlbumIds||[],r.files.push(s),r.files.sort(((t,e)=>t.name.localeCompare(e.name))),await r._saveAlbumCascade(),await this.album._saveAlbumCascade(),{ok:!0}}catch(t){return console.error("restoreToAlbum error:",t),{ok:!1,errors:[String(t)]}}}async removeForever(){try{await this.album.ready();const t=this.album.files.findIndex((t=>t.fullFileId===this.descriptor.fullFileId));if(-1===t)throw new Error("File not found in this album");return this.album.files.splice(t,1),await this.album._saveAlbumCascade(),{ok:!0}}catch(t){return console.error("removeForever error:",t),{ok:!1,errors:[String(t)]}}}}
